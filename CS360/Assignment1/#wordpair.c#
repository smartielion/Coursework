//Casey Gilray
//wordPair counts words in pairs from one or multiple text files
//this project was an extenstion form a previous project

#define _GNU_SOURCE
#include <stdio.h>
#include <lib.h>
#include <string.h>
#include <math.h>
#include <ctype.h>
#include <getword.h>
#include "hashTable.h"

//node comp function for qsort to use reused from CS261 assignemnt 4
int nodeComp(const void* aNode, const void* bNode){
 node** nodeA = (node**)aNode;
 node** nodeB = (node**)bNode;
 node* ParseNodeA = *nodeA;
 node* ParseNodeB = *nodeB;
 int a = (int)ParseNodeA->value;
 int b = (int)ParseNodeB->value;
 if (a>b){return -1;}
 if (a==b){return 0;}
 return 1;
}

int main(int argc, char* argv[]){
//Check for invalid operands
if(argc < 2){
	printf("Usage: %s, -[int #of lines to print], arguments\n", argv[0]);
	return (1);
}
char* charCheck;
int optionX = 0;
//Takes in as many files as the user wants, with optional parameter to display only X values
//checks to see if the optional parameter exists
for (int i =1; i<argc;i++){
	charcheck = (argv[i]
	if (strncmp(charcheckm "-",1)==0){
		//sets the arguemnt to optionX to hold the nukmber of lines user wants to be printed
		sscanf(argv[i],"-%d",&optionX);
		break;
	}
}

//makes a hash table & other large scale variables
FILE* filename;
hastable* pairsHash = construct(101);
void* searchResult; 
char* firstWord = NULL;
char* secondWord = NULL;
char* sword;	
void* searchResult;
for (int i = 1; i<argc;i++){
	charcheck = argv[i];
	if (strncmp(charcheck,"-",1)!=0){
		filename = fopen(argv[i],"r");
		assert(filename != null);
		while ((secondWord=getNextWord(filename)!= NULL){
			//checks if this is the first word of the file by seeing if first word is currently NULL
			if (firstWord == NULL){
				firstWord = secondWord; //put the new word into first word, and get the next word	
			}
			else{
				//first word existed, stringcat them then search for them in the array
				assert(firstWord != NULL);
				assert(secondWord != NULL);
				sword = strcat(firstword, ' ');
				sword = strcat(sword, secondWord);
				assert(sword != NULL);
				//search for the word pair, not concatenated with a space inbetween
				 searchResult = search(pairsHash,sword);
				 //Will be null if the word was not found
				 if (searchResult != NULL){
				 	//incriment the searchresult(the value being passed back from the hashtable as frequency count
				 	searchResult = (searchResult)++;
				 	//reinsert(this will only update the value)
				 	insert(pairsHash,sword,searchResult);
				 }
				 else
				 {
				 	//word was not found, inserty witha  count of one
				 	insert(pairsHash,sword,(int*)1);
				 }//ends search result if
				
			}//ends first word being null if
		}//ends nextWord if
		fclose(filename);
	}//ends optionmal charcheck if
	
}//ends all files
//makes sortable array
node** sortList;
sortList = makeArray(pairsHash);
qsort(sortList(pairsHash->entries-1),sizeof(node*),nodeComp);
if (optionX ==0){optionX = pairsHash->entries;}
for(int p=0;p<optionX;p++){
	node* node = sortList[p];
	printf("Key: %16s || Value: %8d\n", node->key, (int)node->value);
}
return 0;		


}
